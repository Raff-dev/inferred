version: "3.9"

volumes:
  postgres_data: {}
  redis_data: {}

networks:
  database: {}
  redis: {}
  websocket: {}

x-django:
  &django
  build: ./backend
  networks:
    - default
    - database
    - redis
    - websocket
  volumes:
    - ./backend:/app
  env_file: ./backend/.env
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  mock:
    build: ./mock
    container_name: inferred-mock
    command: python mock.py
    networks:
      - default
      - redis
    volumes:
      - ./mock:/app
    depends_on:
      - backend

  backend:
    <<: *django
    container_name: inferred-backend
    # command: uvicorn inferred.core.asgi:application --host 0.0.0.0 --port 8000 --reload
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000

  worker:
    <<: *django
    container_name: inferred-worker
    command: celery -A inferred.core.celery worker --loglevel=info

  capture:
    <<: *django
    container_name: inferred-capture
    command: python manage.py capture_sensor_data

  redis:
    &redis
    image: redis:7-alpine
    restart: always
    networks:
      - redis
    ports:
      - 6379:6379
    healthcheck:
      test: [ CMD, redis-cli, ping ]
      interval: 1s
      timeout: 5s
      retries: 30

  websocket:
    <<: *redis
    ports:
      - 6380:6379
    networks:
      - websocket

  postgres:
    image: postgres
    restart: always
    networks:
      - database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    healthcheck:
      test: [ CMD-SHELL, pg_isready -U postgres ]
      interval: 1s
      timeout: 5s
      retries: 30

  frontend:
    build: ./frontend
    container_name: inferred-frontend
    command: npm run dev
    networks:
      - default
      - redis
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
